kind: pipeline
type: kubernetes
name: dug test

clone:
  disable: true

steps:
  - name: clone
    image: alpine/git
    commands:
    - git clone --recurse-submodules $DRONE_REPO_LINK .
    - git checkout $DRONE_COMMIT
    - git submodule update --recursive --remote

  # Note: I setup BATS here using this: https://medium.com/@pimterry/testing-your-shell-scripts-with-bats-abfca9bdc5b9
  - name: build and test
    image: mcr.microsoft.com/dotnet/sdk:5.0.102-ca-patch-buster-slim-amd64 #Craziness: https://github.com/NuGet/Announcements/issues/49, normally just use the sdk:5.0 tag
    environment:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
    commands:
    # Dont allow bats to do the build, thats a convenience for local development but BATS eats a bunch of the output and can hang.
    - dotnet publish -r linux-x64 -c Release -p:PublishSingleFile=true -p:PublishTrimmed=true -p:PublishReadyToRun=true --self-contained true -o publish ./cli
    - ./cli.tests/bats/run.sh

#   - name: test
#     image: docker:20.10-dind
#     volumes:
#     - name: dockersock
#       path: /var/run
#     commands:
#     - sleep 5 # give docker enough time to start
#     - docker ps -a

#   - name: build
#     image: docker:20.10-dind
#     volumes:
#     - name: dockersock
#       path: /var/run
#     commands:
#       - sleep 5
#       - docker ps
#       - docker build . -t dug-test

# volumes:
# - name: dockersock
#   temp: {}

---

kind: pipeline
type: kubernetes
name: dug publish snap
depends_on:
- dug test

steps:
  - name: build
    image: docker:20.10-dind
    when:
      ref:
      - refs/tags/*.*.*
    environment:
      SNAP_MACAROON:
        from_secret: snap_macaroon
      SNAP_UD:
        from_secret: snap_unbound_discharge
    volumes:
    - name: dockersock
      path: /var/run
    commands:
      - sleep 10 # Give Docker a second...
      - docker ps
      - sed -i 's/0.0.1/${DRONE_TAG}/g' ./cli/snap/snapcraft.yaml
      - sed -i "s~macaroon_value~$${SNAP_MACAROON}~" ./cli/auth_template
      - sed -i "s~ud_value~$${SNAP_UD}~" ./cli/auth_template
      - sed -i 's~<Version>0.0.1</Version>~<Version>${DRONE_TAG}</Version>~' ./cli/dug.csproj #Set the Version in the csproj
      - docker build -f cli/snapcraft.Dockerfile --label snap18custom -t snap18custom:stable ./cli #This takes forever, should we publish/maintain our own?
      - ls ./cli
      - docker run -v "$PWD"/cli:/build -w /build snap18custom:stable /bin/bash -c "snapcraft login --with ./auth_template; snapcraft; snapcraft upload --release=stable unfrl-dug_${DRONE_TAG}_amd64.snap"
      - ls ./cli

services:
- name: docker
  image: docker:dind
  privileged: true
  volumes:
  - name: dockersock
    path: /var/run

volumes:
- name: dockersock
  temp: {}
---

kind: pipeline
type: kubernetes
name: dug publish
depends_on:
- dug test

steps:
- name: prepare_publishing
  image: mcr.microsoft.com/dotnet/sdk:5.0
  commands:
  - echo "Publishing tagged version ${DRONE_TAG}"
  - sed -i 's~<Version>0.0.1</Version>~<Version>${DRONE_TAG}</Version>~' ./cli/dug.csproj #Set the Version in the csproj, its the only way to get the packaging tools to respect the version.
  when:
    ref:
    - refs/tags/*.*.*

- name: docker  
  image: plugins/docker
  settings:
    username:
      from_secret: docker_username
    password:
      from_secret: docker_password
    repo: unfrl/dug
    dockerfile: Dockerfile
    tags: ${DRONE_TAG}
  when:
    ref:
    - refs/tags/*.*.*
    

- name: package linux
  image: mcr.microsoft.com/dotnet/sdk:5.0
  environment:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
  commands:
  - dotnet publish -r linux-x64 -c Release -p:PublishSingleFile=true -p:PublishTrimmed=true -p:PublishReadyToRun=true --self-contained true -o publish ./cli
  - mv ./publish/dug ./publish/dug-linux-x64 #Rename the binary to its architecture type
  - dotnet publish -r linux-arm64 -c Release -p:PublishSingleFile=true -p:PublishTrimmed=true -p:PublishReadyToRun=true --self-contained true -o publish ./cli
  - mv ./publish/dug ./publish/dug-linux-arm64 #Rename the binary to its architecture type
  - dotnet tool restore
  - dotnet deb -c Release -r linux-x64 -o ./publish ./cli/dug.csproj
  - dotnet deb -c Release -r linux-arm64 -o ./publish ./cli/dug.csproj
  - dotnet rpm -c Release -r linux-x64 -o ./publish ./cli/dug.csproj
  - dotnet tarball -c Release -r linux-x64 -o ./publish ./cli/dug.csproj
  when:
    ref:
    - refs/tags/*.*.*
  depends_on:
  - prepare_publishing

- name: build win-x64
  image: mcr.microsoft.com/dotnet/sdk:5.0
  environment:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
  commands:
  - sed -i 's~<version>0.0.1</version>~<version>${DRONE_TAG}</version>~' ./.ci/win/dug.nuspec #Set the Version in the nuspec
  - dotnet publish -r win-x64 -c Release -p:PublishSingleFile=true -p:PublishTrimmed=true -p:IncludeNativeLibrariesForSelfExtract=true --self-contained true -o ./.ci/win/output ./cli
  when:
    ref:
    - refs/tags/*.*.*
  depends_on:
  - prepare_publishing

- name: package/publish win-x64
  image: linuturk/mono-choco
  pull: always
  environment:
    CHOCO_API_KEY:
      from_secret: chocolatey_api_key
  failure: ignore #Until my first chocolatey package (dug@0.0.1) get approved this will always fail
  commands:
  - choco pack ./.ci/win/dug.nuspec --allow-unofficial --out ./.ci/win
  - choco push ./.ci/win/dug.${DRONE_TAG}.nupkg --allow-unofficial --api-key $${CHOCO_API_KEY} --source https://push.chocolatey.org/
  when:
    ref:
    - refs/tags/*.*.*
  depends_on:
  - build win-x64

- name: build osx-x64
  image: mcr.microsoft.com/dotnet/sdk:5.0
  environment:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
  commands:
  - dotnet publish -r osx-x64 -c Release -p:PublishSingleFile=true -p:PublishTrimmed=true -p:IncludeNativeLibrariesForSelfExtract=true --self-contained true -o publish ./cli
  - mv ./publish/dug ./publish/dug-osx-x64 #Rename the binary to its architecture type
  - dotnet tool restore
  - dotnet tarball -c Release -r osx-x64 -o ./publish ./cli/dug.csproj
  when:
    ref:
    - refs/tags/*.*.*
  depends_on:
  - prepare_publishing

- name: github release
  image: plugins/github-release
  settings:
    api_key:
      from_secret: github_token
    files:
      - publish/dug-linux-x64
      - publish/dug-linux-arm64
      - publish/dug-osx-x64
      - .ci/win/dug.${DRONE_TAG}.nupkg
      - ./cli/publish/*.deb
      - ./cli/publish/*.rpm
      - ./cli/publish/*.tar.gz
      - ./.ci/win/output/*.exe
    title: ${DRONE_TAG}
    prerelease: true
  when:
    ref:
    - refs/tags/*.*.*
  depends_on:
  - build win-x64
  - package linux
  - build osx-x64

